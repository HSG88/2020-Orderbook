// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: valprotocol.proto

package valprotocol

import (
	proto "github.com/golang/protobuf/proto"
	common "github.com/offchainlabs/arbitrum/packages/arb-util/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ExecutionAssertionStubBuf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumGas            uint64          `protobuf:"varint,1,opt,name=numGas,proto3" json:"numGas,omitempty"`
	BeforeMachineHash *common.HashBuf `protobuf:"bytes,2,opt,name=beforeMachineHash,proto3" json:"beforeMachineHash,omitempty"`
	AfterMachineHash  *common.HashBuf `protobuf:"bytes,3,opt,name=afterMachineHash,proto3" json:"afterMachineHash,omitempty"`
	BeforeInboxHash   *common.HashBuf `protobuf:"bytes,4,opt,name=beforeInboxHash,proto3" json:"beforeInboxHash,omitempty"`
	AfterInboxHash    *common.HashBuf `protobuf:"bytes,5,opt,name=afterInboxHash,proto3" json:"afterInboxHash,omitempty"`
	FirstMessageHash  *common.HashBuf `protobuf:"bytes,6,opt,name=firstMessageHash,proto3" json:"firstMessageHash,omitempty"`
	LastMessageHash   *common.HashBuf `protobuf:"bytes,7,opt,name=lastMessageHash,proto3" json:"lastMessageHash,omitempty"`
	MessageCount      uint64          `protobuf:"varint,8,opt,name=messageCount,proto3" json:"messageCount,omitempty"`
	FirstLogHash      *common.HashBuf `protobuf:"bytes,9,opt,name=firstLogHash,proto3" json:"firstLogHash,omitempty"`
	LastLogHash       *common.HashBuf `protobuf:"bytes,10,opt,name=lastLogHash,proto3" json:"lastLogHash,omitempty"`
	LogCount          uint64          `protobuf:"varint,11,opt,name=logCount,proto3" json:"logCount,omitempty"`
}

func (x *ExecutionAssertionStubBuf) Reset() {
	*x = ExecutionAssertionStubBuf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valprotocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionAssertionStubBuf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionAssertionStubBuf) ProtoMessage() {}

func (x *ExecutionAssertionStubBuf) ProtoReflect() protoreflect.Message {
	mi := &file_valprotocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionAssertionStubBuf.ProtoReflect.Descriptor instead.
func (*ExecutionAssertionStubBuf) Descriptor() ([]byte, []int) {
	return file_valprotocol_proto_rawDescGZIP(), []int{0}
}

func (x *ExecutionAssertionStubBuf) GetNumGas() uint64 {
	if x != nil {
		return x.NumGas
	}
	return 0
}

func (x *ExecutionAssertionStubBuf) GetBeforeMachineHash() *common.HashBuf {
	if x != nil {
		return x.BeforeMachineHash
	}
	return nil
}

func (x *ExecutionAssertionStubBuf) GetAfterMachineHash() *common.HashBuf {
	if x != nil {
		return x.AfterMachineHash
	}
	return nil
}

func (x *ExecutionAssertionStubBuf) GetBeforeInboxHash() *common.HashBuf {
	if x != nil {
		return x.BeforeInboxHash
	}
	return nil
}

func (x *ExecutionAssertionStubBuf) GetAfterInboxHash() *common.HashBuf {
	if x != nil {
		return x.AfterInboxHash
	}
	return nil
}

func (x *ExecutionAssertionStubBuf) GetFirstMessageHash() *common.HashBuf {
	if x != nil {
		return x.FirstMessageHash
	}
	return nil
}

func (x *ExecutionAssertionStubBuf) GetLastMessageHash() *common.HashBuf {
	if x != nil {
		return x.LastMessageHash
	}
	return nil
}

func (x *ExecutionAssertionStubBuf) GetMessageCount() uint64 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

func (x *ExecutionAssertionStubBuf) GetFirstLogHash() *common.HashBuf {
	if x != nil {
		return x.FirstLogHash
	}
	return nil
}

func (x *ExecutionAssertionStubBuf) GetLastLogHash() *common.HashBuf {
	if x != nil {
		return x.LastLogHash
	}
	return nil
}

func (x *ExecutionAssertionStubBuf) GetLogCount() uint64 {
	if x != nil {
		return x.LogCount
	}
	return 0
}

type ChainParamsBuf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakeRequirement        *common.BigIntegerBuf `protobuf:"bytes,1,opt,name=stakeRequirement,proto3" json:"stakeRequirement,omitempty"`
	StakeToken              *common.AddressBuf    `protobuf:"bytes,2,opt,name=stakeToken,proto3" json:"stakeToken,omitempty"`
	GracePeriod             *common.TimeTicksBuf  `protobuf:"bytes,3,opt,name=gracePeriod,proto3" json:"gracePeriod,omitempty"`
	MaxExecutionSteps       uint64                `protobuf:"varint,4,opt,name=maxExecutionSteps,proto3" json:"maxExecutionSteps,omitempty"`
	ArbGasSpeedLimitPerTick uint64                `protobuf:"varint,5,opt,name=ArbGasSpeedLimitPerTick,proto3" json:"ArbGasSpeedLimitPerTick,omitempty"`
}

func (x *ChainParamsBuf) Reset() {
	*x = ChainParamsBuf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valprotocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainParamsBuf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainParamsBuf) ProtoMessage() {}

func (x *ChainParamsBuf) ProtoReflect() protoreflect.Message {
	mi := &file_valprotocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainParamsBuf.ProtoReflect.Descriptor instead.
func (*ChainParamsBuf) Descriptor() ([]byte, []int) {
	return file_valprotocol_proto_rawDescGZIP(), []int{1}
}

func (x *ChainParamsBuf) GetStakeRequirement() *common.BigIntegerBuf {
	if x != nil {
		return x.StakeRequirement
	}
	return nil
}

func (x *ChainParamsBuf) GetStakeToken() *common.AddressBuf {
	if x != nil {
		return x.StakeToken
	}
	return nil
}

func (x *ChainParamsBuf) GetGracePeriod() *common.TimeTicksBuf {
	if x != nil {
		return x.GracePeriod
	}
	return nil
}

func (x *ChainParamsBuf) GetMaxExecutionSteps() uint64 {
	if x != nil {
		return x.MaxExecutionSteps
	}
	return 0
}

func (x *ChainParamsBuf) GetArbGasSpeedLimitPerTick() uint64 {
	if x != nil {
		return x.ArbGasSpeedLimitPerTick
	}
	return 0
}

type VMProtoDataBuf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineHash  *common.HashBuf       `protobuf:"bytes,1,opt,name=machineHash,proto3" json:"machineHash,omitempty"`
	InboxTop     *common.HashBuf       `protobuf:"bytes,2,opt,name=inboxTop,proto3" json:"inboxTop,omitempty"`
	InboxCount   *common.BigIntegerBuf `protobuf:"bytes,3,opt,name=inboxCount,proto3" json:"inboxCount,omitempty"`
	MessageCount *common.BigIntegerBuf `protobuf:"bytes,4,opt,name=messageCount,proto3" json:"messageCount,omitempty"`
	LogCount     *common.BigIntegerBuf `protobuf:"bytes,5,opt,name=logCount,proto3" json:"logCount,omitempty"`
}

func (x *VMProtoDataBuf) Reset() {
	*x = VMProtoDataBuf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valprotocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMProtoDataBuf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMProtoDataBuf) ProtoMessage() {}

func (x *VMProtoDataBuf) ProtoReflect() protoreflect.Message {
	mi := &file_valprotocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMProtoDataBuf.ProtoReflect.Descriptor instead.
func (*VMProtoDataBuf) Descriptor() ([]byte, []int) {
	return file_valprotocol_proto_rawDescGZIP(), []int{2}
}

func (x *VMProtoDataBuf) GetMachineHash() *common.HashBuf {
	if x != nil {
		return x.MachineHash
	}
	return nil
}

func (x *VMProtoDataBuf) GetInboxTop() *common.HashBuf {
	if x != nil {
		return x.InboxTop
	}
	return nil
}

func (x *VMProtoDataBuf) GetInboxCount() *common.BigIntegerBuf {
	if x != nil {
		return x.InboxCount
	}
	return nil
}

func (x *VMProtoDataBuf) GetMessageCount() *common.BigIntegerBuf {
	if x != nil {
		return x.MessageCount
	}
	return nil
}

func (x *VMProtoDataBuf) GetLogCount() *common.BigIntegerBuf {
	if x != nil {
		return x.LogCount
	}
	return nil
}

type AssertionParamsBuf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumSteps             uint64                `protobuf:"varint,1,opt,name=numSteps,proto3" json:"numSteps,omitempty"`
	ImportedMessageCount *common.BigIntegerBuf `protobuf:"bytes,2,opt,name=importedMessageCount,proto3" json:"importedMessageCount,omitempty"`
}

func (x *AssertionParamsBuf) Reset() {
	*x = AssertionParamsBuf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valprotocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionParamsBuf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionParamsBuf) ProtoMessage() {}

func (x *AssertionParamsBuf) ProtoReflect() protoreflect.Message {
	mi := &file_valprotocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionParamsBuf.ProtoReflect.Descriptor instead.
func (*AssertionParamsBuf) Descriptor() ([]byte, []int) {
	return file_valprotocol_proto_rawDescGZIP(), []int{3}
}

func (x *AssertionParamsBuf) GetNumSteps() uint64 {
	if x != nil {
		return x.NumSteps
	}
	return 0
}

func (x *AssertionParamsBuf) GetImportedMessageCount() *common.BigIntegerBuf {
	if x != nil {
		return x.ImportedMessageCount
	}
	return nil
}

type DisputableNodeBuf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssertionParams *AssertionParamsBuf        `protobuf:"bytes,1,opt,name=assertionParams,proto3" json:"assertionParams,omitempty"`
	Assertion       *ExecutionAssertionStubBuf `protobuf:"bytes,2,opt,name=assertion,proto3" json:"assertion,omitempty"`
	MaxInboxTop     *common.HashBuf            `protobuf:"bytes,3,opt,name=maxInboxTop,proto3" json:"maxInboxTop,omitempty"`
	MaxInboxCount   *common.BigIntegerBuf      `protobuf:"bytes,4,opt,name=maxInboxCount,proto3" json:"maxInboxCount,omitempty"`
}

func (x *DisputableNodeBuf) Reset() {
	*x = DisputableNodeBuf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valprotocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisputableNodeBuf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisputableNodeBuf) ProtoMessage() {}

func (x *DisputableNodeBuf) ProtoReflect() protoreflect.Message {
	mi := &file_valprotocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisputableNodeBuf.ProtoReflect.Descriptor instead.
func (*DisputableNodeBuf) Descriptor() ([]byte, []int) {
	return file_valprotocol_proto_rawDescGZIP(), []int{4}
}

func (x *DisputableNodeBuf) GetAssertionParams() *AssertionParamsBuf {
	if x != nil {
		return x.AssertionParams
	}
	return nil
}

func (x *DisputableNodeBuf) GetAssertion() *ExecutionAssertionStubBuf {
	if x != nil {
		return x.Assertion
	}
	return nil
}

func (x *DisputableNodeBuf) GetMaxInboxTop() *common.HashBuf {
	if x != nil {
		return x.MaxInboxTop
	}
	return nil
}

func (x *DisputableNodeBuf) GetMaxInboxCount() *common.BigIntegerBuf {
	if x != nil {
		return x.MaxInboxCount
	}
	return nil
}

var File_valprotocol_proto protoreflect.FileDescriptor

var file_valprotocol_proto_rawDesc = []byte{
	0x0a, 0x11, 0x76, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x76, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x1a, 0x1c, 0x61, 0x72, 0x62, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3,
	0x04, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x62, 0x42, 0x75, 0x66, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x47, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x47, 0x61, 0x73, 0x12, 0x3d, 0x0a, 0x11, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x66,
	0x52, 0x11, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x3b, 0x0a, 0x10, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x66, 0x52, 0x10,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x39, 0x0a, 0x0f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x66, 0x52, 0x0f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x37, 0x0a, 0x0e, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x42, 0x75, 0x66, 0x52, 0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x62, 0x6f, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x3b, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x66, 0x52,
	0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x39, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x66, 0x52, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x66, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x66, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa7, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x42, 0x75, 0x66, 0x12, 0x41, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x42, 0x75, 0x66, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x75, 0x66, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36,
	0x0a, 0x0b, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x42, 0x75, 0x66, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x65, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x41, 0x72, 0x62, 0x47, 0x61, 0x73, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x41, 0x72, 0x62, 0x47, 0x61, 0x73, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x22, 0x95,
	0x02, 0x0a, 0x0e, 0x56, 0x4d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75,
	0x66, 0x12, 0x31, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x66, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x08, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x54, 0x6f, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x66, 0x52, 0x08, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x54, 0x6f,
	0x70, 0x12, 0x35, 0x0a, 0x0a, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x69, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x42, 0x75, 0x66, 0x52, 0x0a, 0x69, 0x6e,
	0x62, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x42, 0x75, 0x66, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x69, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x42, 0x75, 0x66, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7b, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x75, 0x66, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x75, 0x6d, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6e, 0x75, 0x6d, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x42, 0x75, 0x66, 0x52, 0x14, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x75, 0x66, 0x12, 0x49, 0x0a, 0x0f, 0x61, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x61, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x42, 0x75, 0x66, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x61, 0x6c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x75, 0x62, 0x42, 0x75, 0x66, 0x52,
	0x09, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x54, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x42, 0x75, 0x66,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x54, 0x6f, 0x70, 0x12, 0x3b, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x69,
	0x67, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x42, 0x75, 0x66, 0x52, 0x0d, 0x6d, 0x61, 0x78,
	0x49, 0x6e, 0x62, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x75, 0x6d, 0x2f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x61, 0x72, 0x62, 0x2d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_valprotocol_proto_rawDescOnce sync.Once
	file_valprotocol_proto_rawDescData = file_valprotocol_proto_rawDesc
)

func file_valprotocol_proto_rawDescGZIP() []byte {
	file_valprotocol_proto_rawDescOnce.Do(func() {
		file_valprotocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_valprotocol_proto_rawDescData)
	})
	return file_valprotocol_proto_rawDescData
}

var file_valprotocol_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_valprotocol_proto_goTypes = []interface{}{
	(*ExecutionAssertionStubBuf)(nil), // 0: valprotocol.ExecutionAssertionStubBuf
	(*ChainParamsBuf)(nil),            // 1: valprotocol.ChainParamsBuf
	(*VMProtoDataBuf)(nil),            // 2: valprotocol.VMProtoDataBuf
	(*AssertionParamsBuf)(nil),        // 3: valprotocol.AssertionParamsBuf
	(*DisputableNodeBuf)(nil),         // 4: valprotocol.DisputableNodeBuf
	(*common.HashBuf)(nil),            // 5: common.HashBuf
	(*common.BigIntegerBuf)(nil),      // 6: common.BigIntegerBuf
	(*common.AddressBuf)(nil),         // 7: common.AddressBuf
	(*common.TimeTicksBuf)(nil),       // 8: common.TimeTicksBuf
}
var file_valprotocol_proto_depIdxs = []int32{
	5,  // 0: valprotocol.ExecutionAssertionStubBuf.beforeMachineHash:type_name -> common.HashBuf
	5,  // 1: valprotocol.ExecutionAssertionStubBuf.afterMachineHash:type_name -> common.HashBuf
	5,  // 2: valprotocol.ExecutionAssertionStubBuf.beforeInboxHash:type_name -> common.HashBuf
	5,  // 3: valprotocol.ExecutionAssertionStubBuf.afterInboxHash:type_name -> common.HashBuf
	5,  // 4: valprotocol.ExecutionAssertionStubBuf.firstMessageHash:type_name -> common.HashBuf
	5,  // 5: valprotocol.ExecutionAssertionStubBuf.lastMessageHash:type_name -> common.HashBuf
	5,  // 6: valprotocol.ExecutionAssertionStubBuf.firstLogHash:type_name -> common.HashBuf
	5,  // 7: valprotocol.ExecutionAssertionStubBuf.lastLogHash:type_name -> common.HashBuf
	6,  // 8: valprotocol.ChainParamsBuf.stakeRequirement:type_name -> common.BigIntegerBuf
	7,  // 9: valprotocol.ChainParamsBuf.stakeToken:type_name -> common.AddressBuf
	8,  // 10: valprotocol.ChainParamsBuf.gracePeriod:type_name -> common.TimeTicksBuf
	5,  // 11: valprotocol.VMProtoDataBuf.machineHash:type_name -> common.HashBuf
	5,  // 12: valprotocol.VMProtoDataBuf.inboxTop:type_name -> common.HashBuf
	6,  // 13: valprotocol.VMProtoDataBuf.inboxCount:type_name -> common.BigIntegerBuf
	6,  // 14: valprotocol.VMProtoDataBuf.messageCount:type_name -> common.BigIntegerBuf
	6,  // 15: valprotocol.VMProtoDataBuf.logCount:type_name -> common.BigIntegerBuf
	6,  // 16: valprotocol.AssertionParamsBuf.importedMessageCount:type_name -> common.BigIntegerBuf
	3,  // 17: valprotocol.DisputableNodeBuf.assertionParams:type_name -> valprotocol.AssertionParamsBuf
	0,  // 18: valprotocol.DisputableNodeBuf.assertion:type_name -> valprotocol.ExecutionAssertionStubBuf
	5,  // 19: valprotocol.DisputableNodeBuf.maxInboxTop:type_name -> common.HashBuf
	6,  // 20: valprotocol.DisputableNodeBuf.maxInboxCount:type_name -> common.BigIntegerBuf
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_valprotocol_proto_init() }
func file_valprotocol_proto_init() {
	if File_valprotocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_valprotocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionAssertionStubBuf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valprotocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainParamsBuf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valprotocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMProtoDataBuf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valprotocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionParamsBuf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valprotocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisputableNodeBuf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_valprotocol_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_valprotocol_proto_goTypes,
		DependencyIndexes: file_valprotocol_proto_depIdxs,
		MessageInfos:      file_valprotocol_proto_msgTypes,
	}.Build()
	File_valprotocol_proto = out.File
	file_valprotocol_proto_rawDesc = nil
	file_valprotocol_proto_goTypes = nil
	file_valprotocol_proto_depIdxs = nil
}
