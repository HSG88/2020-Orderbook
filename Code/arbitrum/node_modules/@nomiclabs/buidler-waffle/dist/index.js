"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("@nomiclabs/buidler/config");
const plugins_1 = require("@nomiclabs/buidler/plugins");
const path_1 = __importDefault(require("path"));
function initializeWaffleMatchers(projectRoot) {
    try {
        let chaiPath = require.resolve("chai");
        // When using this plugin linked from sources, we'd end up with the chai
        // used to test it, not the project's version of chai, so we correct it.
        if (chaiPath.startsWith(path_1.default.join(__dirname, "..", "node_modules"))) {
            chaiPath = require.resolve("chai", {
                paths: [projectRoot],
            });
        }
        const chai = require(chaiPath);
        const { waffleChai } = require("./waffle-chai");
        chai.use(waffleChai);
    }
    catch (error) {
        // If chai isn't installed we just don't initialize the matchers
    }
}
function default_1() {
    config_1.extendEnvironment((bre) => {
        // We can't actually implement a MockProvider because of its private
        // properties, so we cast it here ðŸ˜¢
        bre.waffle = plugins_1.lazyObject(() => {
            const { WaffleMockProviderAdapter, } = require("./waffle-provider-adapter");
            return {
                provider: new WaffleMockProviderAdapter(bre.network),
            };
        });
        initializeWaffleMatchers(bre.config.paths.root);
    });
    config_1.usePlugin("@nomiclabs/buidler-ethers");
}
exports.default = default_1;
//# sourceMappingURL=index.js.map