diff --git a/packages/arb-avm-cpp/avm/include/avm/machine.hpp b/packages/arb-avm-cpp/avm/include/avm/machine.hpp
index c122e674..f96bf954 100644
--- a/packages/arb-avm-cpp/avm/include/avm/machine.hpp
+++ b/packages/arb-avm-cpp/avm/include/avm/machine.hpp
@@ -43,8 +43,10 @@ class Machine {
     void initializeMachine(const MachineState& initial_state);
 
     Assertion run(uint64_t stepCount,
-                  uint256_t timeBoundStart,
-                  uint256_t timeBoundEnd,
+                  uint256_t startBlock,
+                  uint256_t endBlock,
+                  uint256_t startTime,
+                  uint256_t endTime,
                   Tuple messages,
                   std::chrono::seconds wallLimit);
 
diff --git a/packages/arb-avm-cpp/avm/include/avm/machinestate/machinestate.hpp b/packages/arb-avm-cpp/avm/include/avm/machinestate/machinestate.hpp
index 2c5afdfe..0e08d566 100644
--- a/packages/arb-avm-cpp/avm/include/avm/machinestate/machinestate.hpp
+++ b/packages/arb-avm-cpp/avm/include/avm/machinestate/machinestate.hpp
@@ -27,7 +27,7 @@
 
 enum class Status { Extensive, Halted, Error };
 
-typedef std::array<uint256_t, 2> TimeBounds;
+typedef std::array<uint256_t, 4> TimeBounds;
 
 class CheckpointStorage;
 
diff --git a/packages/arb-avm-cpp/avm/src/machine.cpp b/packages/arb-avm-cpp/avm/src/machine.cpp
index 888d64ec..a49922f0 100644
--- a/packages/arb-avm-cpp/avm/src/machine.cpp
+++ b/packages/arb-avm-cpp/avm/src/machine.cpp
@@ -50,14 +50,16 @@ void Machine::initializeMachine(const MachineState& initial_state) {
 }
 
 Assertion Machine::run(uint64_t stepCount,
-                       uint256_t timeBoundStart,
-                       uint256_t timeBoundEnd,
+                       uint256_t startBlock,
+                       uint256_t endBlock,
+                       uint256_t startTime,
+                       uint256_t endTime,
                        Tuple messages,
                        std::chrono::seconds wallLimit) {
     bool has_time_limit = wallLimit.count() != 0;
     auto start_time = std::chrono::system_clock::now();
     machine_state.context = AssertionContext{
-        TimeBounds{{timeBoundStart, timeBoundEnd}}, std::move(messages)};
+        TimeBounds{{startBlock, endBlock, startTime, endTime}}, std::move(messages)};
     while (machine_state.context.numSteps < stepCount) {
         auto blockReason = runOne();
         if (!nonstd::get_if<NotBlocked>(&blockReason)) {
diff --git a/packages/arb-avm-cpp/avm/src/machinestate/machineoperation.cpp b/packages/arb-avm-cpp/avm/src/machinestate/machineoperation.cpp
index c0050336..cde1f9cc 100644
--- a/packages/arb-avm-cpp/avm/src/machinestate/machineoperation.cpp
+++ b/packages/arb-avm-cpp/avm/src/machinestate/machineoperation.cpp
@@ -585,9 +585,11 @@ BlockReason send(MachineState& m) {
 }
 
 void getTime(MachineState& m) {
-    Tuple tup(m.pool.get(), 2);
+    Tuple tup(m.pool.get(), 4);
     tup.set_element(0, m.context.timeBounds[0]);
     tup.set_element(1, m.context.timeBounds[1]);
+    tup.set_element(2, m.context.timeBounds[2]);
+    tup.set_element(3, m.context.timeBounds[3]);
     m.stack.push(std::move(tup));
     ++m.pc;
 }
diff --git a/packages/arb-avm-cpp/cavm/cmachine.cpp b/packages/arb-avm-cpp/cavm/cmachine.cpp
index 05cff6eb..8cec8192 100644
--- a/packages/arb-avm-cpp/cavm/cmachine.cpp
+++ b/packages/arb-avm-cpp/cavm/cmachine.cpp
@@ -146,22 +146,28 @@ ByteSlice machineMarshallForProof(CMachine* m) {
 
 RawAssertion machineExecuteAssertion(CMachine* m,
                                      uint64_t maxSteps,
-                                     void* timeboundStartData,
-                                     void* timeboundEndData,
+                                     void* startBlockData,
+                                     void* endBlockData,
+                                     void* startTimestampData,
+                                     void* endTimestampData,
                                      void* inbox,
                                      uint64_t wallLimit) {
     assert(m);
     Machine* mach = static_cast<Machine*>(m);
-    auto timeboundStartPtr = reinterpret_cast<const char*>(timeboundStartData);
-    auto timeboundStart = deserializeUint256t(timeboundStartPtr);
-    auto timeboundEndPtr = reinterpret_cast<const char*>(timeboundEndData);
-    auto timeboundEnd = deserializeUint256t(timeboundEndPtr);
+    auto startBlockPtr = reinterpret_cast<const char*>(startBlockData);
+    auto startBlock = deserializeUint256t(startBlockPtr);
+    auto endBlockPtr = reinterpret_cast<const char*>(endBlockData);
+    auto endBlock = deserializeUint256t(endBlockPtr);
+    auto startTimestampPtr = reinterpret_cast<const char*>(startTimestampData);
+    auto startTimestamp = deserializeUint256t(startTimestampPtr);
+    auto endTimestampPtr = reinterpret_cast<const char*>(endTimestampData);
+    auto endTimestamp = deserializeUint256t(endTimestampPtr);
 
     auto inboxData = reinterpret_cast<const char*>(inbox);
     auto messages = deserialize_value(inboxData, mach->getPool());
 
-    Assertion assertion = mach->run(maxSteps, timeboundStart, timeboundEnd,
-                                    nonstd::get<Tuple>(std::move(messages)),
+    Assertion assertion = mach->run(maxSteps, startBlock, endBlock, startTimestamp,
+                                    endTimestamp, nonstd::get<Tuple>(std::move(messages)),
                                     std::chrono::seconds{wallLimit});
     std::vector<unsigned char> outMsgData;
     for (const auto& outMsg : assertion.outMessages) {
diff --git a/packages/arb-avm-cpp/cavm/cmachine.h b/packages/arb-avm-cpp/cavm/cmachine.h
index a2bdf682..987de652 100644
--- a/packages/arb-avm-cpp/cavm/cmachine.h
+++ b/packages/arb-avm-cpp/cavm/cmachine.h
@@ -69,8 +69,10 @@ CBlockReason machineIsBlocked(CMachine* m, void* currentTime, int newMessages);
 
 RawAssertion machineExecuteAssertion(CMachine* m,
                                      uint64_t maxSteps,
-                                     void* timeboundStart,
-                                     void* timeboundEnd,
+                                     void* startBlockData,
+                                     void* endBlockData,
+                                     void* startTimestampData,
+                                     void* endTimestampData,
                                      void* inbox,
                                      uint64_t wallLimit);
 
